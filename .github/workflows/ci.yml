name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14, 16, 18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm test
    
    - name: Run tests with coverage
      run: npm run test:coverage --if-present
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == 18
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: sentinel-coverage
        fail_ci_if_error: false

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run benchmarks
      run: node bin/sentinel.js benchmark
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results-*.json
        retention-days: 30

  stress-test:
    name: Stress Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run stress tests
      run: timeout 300 node bin/sentinel.js stress-test || true
    
    - name: Upload stress test results
      uses: actions/upload-artifact@v3
      with:
        name: stress-test-results
        path: stress-test-results-*.json
        retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Run security audit
      run: npm audit --audit-level=high
    
    - name: Run dependency check
      run: npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' --summary

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build TypeScript definitions
      run: npm run build:types --if-present
    
    - name: Create package
      run: npm pack
    
    - name: Upload package
      uses: actions/upload-artifact@v3
      with:
        name: npm-package
        path: '*.tgz'
        retention-days: 30

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [test, security, build, benchmark]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build TypeScript definitions
      run: npm run build:types --if-present
    
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      app:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        ports:
          - 3000:3000
        env:
          NODE_ENV: production
          SENTINEL_INTERVAL: 10000
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Wait for service
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'
    
    - name: Run integration tests
      run: |
        # Test health endpoint
        curl -f http://localhost:3000/health
        
        # Test metrics endpoint
        curl -f http://localhost:3000/metrics
        
        # Test memory allocation
        for i in {1..10}; do
          curl -X POST http://localhost:3000/api/test-allocation
          sleep 2
        done

  performance-regression:
    name: Performance Regression Test
    runs-on: ubuntu-latest
    needs: benchmark
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout base branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.base_ref }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies (base)
      run: npm ci
    
    - name: Run baseline benchmark
      run: node bin/sentinel.js benchmark
    
    - name: Save baseline results
      run: mv benchmark-results-*.json baseline-benchmark.json
    
    - name: Checkout PR branch
      uses: actions/checkout@v4
    
    - name: Install dependencies (PR)
      run: npm ci
    
    - name: Run PR benchmark
      run: node bin/sentinel.js benchmark
    
    - name: Compare results
      run: |
        node -e "
        const baseline = require('./baseline-benchmark.json');
        const current = require(require('fs').readdirSync('.').find(f => f.startsWith('benchmark-results-')));
        
        // Compare average overhead
        const baseOverhead = Object.values(baseline.results['overhead-analysis'] || {})
          .reduce((sum, o) => sum + Math.abs(o.timeOverhead), 0) / 
          Object.keys(baseline.results['overhead-analysis'] || {}).length;
        
        const currentOverhead = Object.values(current.results['overhead-analysis'] || {})
          .reduce((sum, o) => sum + Math.abs(o.timeOverhead), 0) / 
          Object.keys(current.results['overhead-analysis'] || {}).length;
        
        const regression = currentOverhead - baseOverhead;
        
        console.log(\`Baseline overhead: \${baseOverhead.toFixed(2)}%\`);
        console.log(\`Current overhead: \${currentOverhead.toFixed(2)}%\`);
        console.log(\`Regression: \${regression.toFixed(2)}%\`);
        
        if (regression > 0.5) {
          console.error('Performance regression detected!');
          process.exit(1);
        }
        "

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, benchmark, security, build]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: ${{ needs.test.result == 'success' && needs.benchmark.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ Sentinel CI pipeline passed successfully!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Notify Slack on Failure
      if: ${{ needs.test.result == 'failure' || needs.benchmark.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ Sentinel CI pipeline failed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}